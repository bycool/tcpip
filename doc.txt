前几章:

1.socket()
	为了执行网络io，进程必须先创建socket，指定期待的通信协议类型。
	#include <sys/socket.h>
	int socket(int family, int type, int protocol);
	参数:
		int family   : 协议族
		int type     : 套接字类型
		int protocol : 某个协议类型常值，或0.

		family:     	说明
		AF_INET     	IPv4
		AF_INET6    	IPv6
		AF_LOCAL		UNIX域协议
		AF_ROUTE		路由套接字
		AF_KEY			密钥套接字

		type:       	说明
		SOCK_STREAM		字节流套接字
		SOCK_DGRAM		数据报套接字
		SOCK_SEQPACKET	有序分组套接字
		SOCK_RAM		原始套接字

		protocol:		说明
		IPPROTO_CP		tcp传输协议
		IPPROTO_UDP		UDP传输协议
		IPPROTO_SCTP	SCTP传输协议

	返回值:
		socket函数在成功时返回一个很小的非负证书值，类似文件描述符.

2.connect()
	TCP客户端用connect函数来建立与TCP服务器的链接。
	#include <sys/socket.h>
	int connect(int sockfd, const struct sockaddr* servaddr, socklen_t addrlen);
	参数：
		int sockfd                 : 由socket函数返回的套接字描述符。
		struct sockaddr *servaddr  : 套接字地址结构指针，包含服务器ip地址等信息的地址结构指针
		socklen_t addrlen          : 套接字地址结构长度

	客户端链接服务器前不需要调用bind函数绑定端口，如果需要的话，内核会确定塬ip地址，并选择一个临时端口作为塬端口.

	如果是TCP套接字，调用connect函数会激发TCP的三次握手过程，而且仅在链接建立成功或出错时才返回：
	1，若TCP客户端没有收到SYN分节的响应，则返回ETIMEDOUT错误，会尝试在发送两次，并延长等待响应时间。
	2，若对客户端的SYN的响应是RST（表示复位）,则表明服务器主机在客户端指定的端口没有进程在等待与之链接。
	3，若客户端发出的SYN在中间的某个路由器引发了"destination unreachable"（目的地不可达）ICMP错误，被认为是"软错误"，客并作为EHOSTUNREACH或ENETUNREACH错误返回给进程。

	struct sockaddr:  <sys/socket.h>
		struct sockaddr {
			sa_family_t     sin_family;     //地址族
			char            sa_data[14];    // 14字节，包含套接字中的目标地址和端口
		}

	struct sockaddr_in: <netinet/in.h>或<arpa/inet.h>
		struct sockaddr_in {
			sa_family_t       sin_family;   //地址族
			uint16_t          sin_port;     //16位tcp/udp端口号  } 这两项必须是网络字节序
			struct in_addr    sin_addr;     //32位ip地址         }
			char              sin_zero[8];  //不使用
		}
		struct in_addr {
			In_addr_ t        s_addr;       //32位IPv4地址
		}

3.bind()
	bind()函数把一个本地协议地址赋予一个套接字。 对网际网络协议，IPv4是32位地址，IPv6是128位地址，端口号是16位。
	#include <sys/socket.h>
	int bind(int sockfd, const struct sockaddr *myaddr, socklen_t addrlen);
	参数:
		int sockfd                : 由socket()函数返回的套接字描述符。
		struct sockaddr *myaddr   : 指向特定于协议的地址结构的指针。这个参数是sockaddr结构体，结构体保存了本地端口信息。将这些信息交给bind(),bind()还你一个套接字描述符。
		socklen_t addrlen         : 结构体长度
	第二三个参数可以指定，也可以不指定。
	 1.服务器启动时捆绑它们众所周知的端口：如果TCP客户端或者服务器端并未曾调用bind()绑定一个端口，当调用connect或listen时，内核就要为对应的套接字选择一个临时接口，当调用connect或者listen时，内核就要为相应的套接字选择一个临时的接口。
	 2.进程可以指定一个特定的ip地址捆绑到它的套接字上，不过这个ip地址必须是其所在主机的网络接口之一(多网卡情况把). 如果客户端没有指定网卡，则内核根据外出网络作为塬IP。

4.listen()
	listen()只在TCP服务器端调用,它做两件事.
	 1.当socket函数创建一个套接字时，套接字默认是主动套接字，listen把一个未链接的套接字转变成一个被动套接字。指示内核接受指向该套接字的链接请求。
	 2.规定内核应该为相应套接字排队的最大链接个数。
	#include <sys/socket.h>
	int listen(int sockfd, int backlog)
	参数:
		int sockfd
		int backlog : 内核为任何一个给定的监听套接字维护两个队列。
						1，为完成连接队列：正在进行三次握手的套接字
						2，已完成连接队列：已经完成三次握手的套接字
				当客户的SYN J到达服务器时，服务端TCP在未完成队列创建一个新项，这个项是三次握手的第二个分节，包括SYN K和ACK J+1，它即保存在未完成队列内，也要发送给客户端，
                如果客户端顺利发来三次握手的第三个分节ACK K+1，那么服务端的新项就从未完成队列移到已完成队列的队尾，等待服务端的进程调用accept()时，就把已完成队列的队头项
                返回给进程。如果队列为空，进程就进入睡眠，直到TCP在该队列放入一个新项来唤醒它。

		关于backlog:
			1.两个队列总和是backlog
			2.backlog的模糊因子：backlog设为10，但可以容纳15个。1.5倍的关系。
			3.backlog不要设为0，不同版本对0的处理不同。
			4.当一个客户发来SYN到达时，队列是满的，TCP会忽略该分节，也就是不发RST。等待客户端的重发机制重发SYN。

5.accept()
	accept()函数由TCP服务器调用，用于从已完成链接队列队头返回一个已完成的链接。如果队列为空，进程进入睡眠。
	#include <sys/socket.h>
	int accept(int sockfd, struct sockaddr* cliaddr, socklen_t *addrlen);
	参数:
		struct sockaddr *cliaddr   : 用来保存客户端协议地址，是个返回值。
		socklen_t * addrlen        : 如上结构体的实际长度。
	如果accept()成功，会返回一个全新的套接字描述符，代表与其链接的可以返回客户端的TCP链接。

	在accept()阻塞时，如果TCP服务器的子进程退出，子进程会发送SIGCHLD信号给父进程。父进程绑定此信号，会执行处理信号函数，则accept()会返回一个EINTER错误，如果父进程不处理这个错误，程序会终止。

	慢系统调用 (slow system call),描述那些可能永远阻塞的系统调用，永远阻塞的系统调用是指调用有可能永远无法返回，多数网络支持函数都属于这一类。
	使用与慢系统调用的基本规则：当阻塞与某个慢系统调用的一个进程捕获某个信号且相应信号处理函数返回时，该系统调用可能返回一个EINTR错误。编写程序是必须对EINTR错误有所准备。

6.fork()
	创建子进程
	#include <unistd.h>
	pid_t fork(void);
	fork()调用一次 ，有两次返回：
		printf("pid: %d, buf: %s\n",getpid(),  buf);
		1.父进程返回子进程pid
		2.子进程返回0
	fork()后，父进程需要知道子进程的pid，只能通过fork的返回值得到，子进程如果想获得自己的pid只需要使用getpid()。

	fork()的两种经典用法：
		1，一个进程创建一个自身的副本，每个副本都可以在另一个副本执行其它任务的同时处理各自的某个操作，这是网络服务器的典型用法。
		2，一个进程如果像执行另一个程序，先fork创建自身的副本，副本内调用exec把自身替换成另一个的程序.

	如果子进程先于父进程退出，则子进程将变成僵尸进程，因为它的资源没有被回收。如果此时父进程退出，则僵尸进程会认init做父进程，让init来回收僵尸进程的资源
	如何避免僵尸进程，在父进程中调用wait()或waitpid()，即可。子进程退出会向父进程发送SIGCHLD信号, 或者在父进程中处理SIGCHLD信号，在处理该信号的函数内调用wait()或waitpid()即可立即回收子进程的资源。

	如果父进程先于子进程退出，则子进程被init进程领养，则init负责回收自己进程资源。

7,wait() waitpid()
	调用这两个函数来处理已经终止的子进程
	#include <sys/wait.h>
	pid_t wait(int* statloc);
	pid_t waitpid(pid_t pid, int* statloc, int options);

	函数wait, waitpid均返回两个值，已终止子进程的进程id号，和statloc指针返回子进程终止状态。
	通过statloc和三个宏可以检查终止状态。并识别子进程是：1正常终止，2被信号杀死，3作业控制停止。
	还有些宏用于获取子进程退出状态，杀死子进程的信号值，或者停止子进程的作业控制信号值。

	如果子进程先于父进程退出，且父进程调用了wait()，则父进程会立即回收子进程资源，避免其变成僵尸进程。
	如果父进程调用wait()，则父进程会被阻塞在wait()函数，知道有子进程退出，父进程才会继续顺序执行下去。经过测试，wait只需要一个子进程即可解除阻塞状态。

	waitpid(),可以指定子进程
	参数pid，指定子进程id号，-1表示等待第一个终止的子进程.
	参数options,附加项，常用的WNOHANG，它告诉内核在没有已终止的子进程时不要阻塞。

	wait()和waitpid()是有区别的:
		一个服务器，接受到一个客户端的5个链接，所以服务器有5个子进程，当客户端退出，则5个链接同时断开，服务器的5个子进程同时退出，并向父进程发送SIGCHLD。则如果用wait，只有第一个关掉的子进程会被回收。
	其它子进程变成僵尸进程。所以使用signal()处理SIGCHLD，在处理函数内调用wait()并不能完全防止出现僵尸进程。
		问题在于5个信号都在处理函数之前发生，而信号处理函数只执行一次。
		正确的做法是调用waitpid()而不是wait()。在信号处理函数内循环处理信号，使用waitpid()且不阻塞。

8,并发服务器
	实现并发即在accept()之后，fork()出子进程，由于fork是复制进程自身，所以listen_sock_fd和client_sock_fd在两个进程内是都存在的，所以父进程关闭client_sock_fd，子进程可以关闭listen_sock_fd,这样这两个描述符的计数器就会-1。子进程处理完业务后调用exit()退出。

9.close()
	通常Unix close()函数是用来关闭套接字，终止tcp链接。
	#include <unistd.h>
	int close(int sockfd);
	描述符引用计数器。close()导致描述符引用技术-1，如果计数器依然大于0，tcp不会引发TCP的四分组链接终端序列。
	如果执意想终端这个链接，可以使用shutdown()代替close()

10.getsockname()和getpeername()
	这两个函数或者返回与某个套接字关联的本地协议地址，或者返回与某个套接字关联的外地协议地址。
	#include <sys/socket.h>
	int getsockname(int sockfd, struct sockaddr* localaddr, socklen_t *addrlen);
	int getpeername(int sockfd, struct sockaddr* peeraddr, socklen_t *addrlen);
	1，在客户端上，connect()返回成功后，getsockname用于返回由内核赋予该链接的本地ip地址和本地端口号。
	2，在服务端上，以端口0调用bind(告知内核区选择本地开端后号)后，getsockname用于返回由内核赋予的本地端口号。


11.服务器进程终止
	1，正常启动一个TCP服务器和客户端，服务器使用子进程与客户端保持链接。
	2，杀掉服务器子进程，这会导致服务器向客户端发送一个FIN，而客户端会相应一个ACK发回来。
	3，SIGCHLD信号发送给服务器父进程，并得到正确的处理
	4，客户端没发生任何特殊的事，只接受一个FIN，并返回一个ACK。然后阻塞在fget().
	5，键入新文本，让客户端发送给服务器，此时TCP链接的断开流程已经完成一般。但客户端感知不到。
	   当客户端是用writen时，客户TCP接着把数据发送诶服务器，TCP允许这样做,因为客户接受的FIN值表示服务器进程关闭了服务器端。
	   当客户向一个服务器端已经关闭了的套接字发送信息时，服务器TCP会返回一个RST。
	6，客户进程是看不到这个RST的。

12.SIGPIPE信号
	当客户端进程向某一个已收到RST的套接字执行写操作，内核会向该进程发送一个SIGPIPE信号，该信号的默认行为是终止进程。进程必须捕获它，避免不情愿的被终止。



第六章 I/O复用：select和poll函数
概述:
	当TCP客户端同时处理标准输入和TCP套接字时，当客户端要输入文本给套接字时，进程阻塞在fgets()这样的函数内，而此时如果TCP套接字发送类似FIN或者其它数据分节时，客户端进程是没办法及时相应的。
	所以进程需要一种预先告知内核，使得内核一旦发现进程指定的一个或多个IO条件就绪，内核就通知进程，这个功能叫做IO复用。由select和poll函数支持。

	IO复用典型使用场景：
	1，当客户处理多个描述符(通常是交互式输入和为网络套接字)时，必须使用IO复用。
	2，一个客户端同时处理多个网络套接字。
	3，一个TCP服务器既要处理监听套接字，又要处理已链接套接字，一般就要使用IO复用。
	4，服务器既要处理TCP，又要处理UDP。
	5，一个服务器要处理多个服务或者多个协议。
	I/O复用并非只限于网络编程。

 6.2 I/O模型
	1，阻塞式I/O
		阻塞式I/O就是套接字已经准备好了，就等着套接字内来数据，不来数据就一直等着，来数据了在往下执行，不然就已知卡在接受数据的函数内。
		进程调用recvfrom,其系统调用知道数据报到达且被赋值到应用进程的缓冲区中或者发生错误才返回。从调用recvfrom开始到它返回的整段时间内是被阻塞的。

	2，非阻塞式I/O
		进程把一个套接字设置成非阻塞是在通知内核：当所请求的I/O操作非得把本进程投入睡眠才完成时，不要把进程投入睡眠，而是返回一个错误。

	3，I/O复用(select和poll)
		有了I/O复用，可以调用select和poll，阻塞在这两个系统调用中某一个之上，而不是阻塞真正的I/O系统调用上。
		类似用select监听描述符，当描述符可读时，select返回，在调用recvfrom把数据报复制到应用进程缓冲区。
		可以理解进程的套接字在内核曾是畅通无阻的，当远端发送数据到本端时，内核的套接字已经把数据接受，此时有select监听着这个套接字，select发现套接字有数据，则退出阻塞返回给进程。进程便得知套接字可读。

	4，信号驱动I/O(SIGIO)
		使用信号，让内核在描述符就绪时发送SIGIO信号通知进程。

	5，异步I/O
		暂略

 6.3 select()
	该函数允许进程指示内核等待多个事件的任何一个发生，并只在有一个或多个时间发生或经历一段指定的时间后才唤醒它。
	#include <sys/socket.h>
	#include <sys/time.h>
	int select(int maxfdpl, fd_set *readset, fd_set *writeset, fd_set *exceptset, const struct timeval *timeout);
	参数：
		struct timeval {
			long tv_sec;
			long tv_usec;
		}
			1,永远等待下去：NULL；
			2,等待一个固定时间：设置timeval
			3,根本不等待：设置timeval = 0;

		fd_set *readset, *writeset, *exceptset:
			指定进程让内核测试读、写和异常条件的描述符。
			如何给这3个参数中的每个参数指定一个或多个描述符值? select使用描述符集，通常是一个整数数组。
			fd_set rset;
			FD_ZERO(&rset)
			FD_SET(1, &rset)
			FD_SET(4, &rset)
			FD_SET(5, &rset)
		这三个参数调用时是参数，返回时，包含的是已就绪的描述符。返回后，使用FD_ISSET宏来测试fd_set数据类型中的描述符
		描述符集内任何与未就绪描述符对应的位返回时均清成0，所以每次重新调用select函数时，需要再次把描述符内所关心的位均置为1.
		该函数的返回值为跨所有描述符集的已就绪的总位数。如果描述符就绪前定时器到时，那么返回0，返回-1表示出错。

		如果不是listenfd触发select返回，而是connfd触发的，那么不可读的套接字会被select清除，所以可以用FD_ISSET判断套接字是否是可读的。所以如果还需要调用select，需将要监听的fd_set传给select。

		maxfdp1参数指定待测试的描述符个数，它们的值是带测试的最大描述符加1
			比如带测描述符1，4，5，则maxfdp1则是6.

	描述符就绪条件：
		1，套接字接受缓冲区中的数据字节大于等于套接字接收缓冲区低水位标记的当前大小。这样的套接字就是已经准备就绪的。套接字的低水位标记可以使用SO_RCVLOWAT设置。
		2，链接读半部关闭(也就是接收了FIN的TCP)
		3，监听套接字已完成的连接数不为0.
		4，右套接字错误待处理。这样的套接字的读操作将不阻塞并返回-1.
	套接字准备好写：
		1，套接字缓冲区的可用空间字节大于等于套接字发送缓冲区低水位的当前大小。
		2，写半部关闭，对这样的套接字的写操作将产生SIGPIPE信号。
		3，使用非阻塞connect的套接字已建立链接，或connect已经失败。
		4，一个套接字错误待处理

	select最大描述符数
	<sys/types.h> FD_SETSIZE 256

 6.6 shutdown()函数
	终止网络链接的通常方法是调用close()，不过close()有两个限制。
	1，close()把描述符的引用技术减1，仅当计数为0时才关闭套接字。shutdown()可以不管引用技术就激发TCP的正常链接终止序列。
	2，close()终止读和写两个方向的数据传送。既然TCP链接是双工的，有时候我们需要告知对方端我们已经完成数据发送，即使对端仍有数据要发送给我们。

	#include <sys/socket.h>
	int shutdown(int sockfd, int howto);
	参数：
		howto:
			SHUT_RD: 关闭链接的读。接受缓冲区内的数据被丢掉，而且套接字也不会在接收数据。
			SHUT_WR: 关闭链接的写。发送缓冲区内的数据会被发送，之后跟TCP的正常链接终止序列。
			SHUT_RW: 关闭读写。

 6.10 poll()函数
	poll提供的功能和select类似，不过在处理流设备时，它能够提供额外的信息。
	#include <poll.h>
	int poll(struct pollfd *fdarray, unsigned long nfds, int timeout);
	参数：
	1	struct pollfd {
			int fd;
			short events; //测试条件
			short revents; //返回描述符的状态
		};	

		常值           作为events输入         作为revents结果      说明
    	------------------------------------------------------------------------------------
    	POLLIN         y                      y                    普通或优先级带数据可读
		POLLRDNORM     Y                      Y                    普通数据可读
		POLLRDBAND     Y                      Y                    优先级袋鼠据可读
		POLLPRI        Y                      Y                    高优先级数据可读
    	------------------------------------------------------------------------------------
		POLLOUT        Y                      Y                    普通数据可写
		POLLWNORM      Y                      Y                    普通数据可写
		POLLWRBAND     Y                      Y                    优先级带数据可写
	    ------------------------------------------------------------------------------------
		POLLERR                               Y                    发生错误
		POLLHUP                               Y                    发生错误
		POLLNVAL                              Y                    描述符不是一个打开的文件
	    ------------------------------------------------------------------------------------
		第一部分：处理输入的四个常值。
		第二部分：处理输出的三个常值。
		第三部分：处理错误的三个常值，但只能从revents中返回。
		poll识别的三类数据： 普通，优先级带，高优先级。

	2	nfds，结构数组中元素的个数由nfds参数决定。

	3	timeout,指定poll函数返回前等待多长时间， 毫秒数正值。

		timeout值		说明
		---------------------------------
		INFTIM			永远等待
		0				立即返回，不阻塞进程
		>0				等待指定数目的毫秒数
		---------------------------------
	

第七章： 套接字选项
	有很多方法来获取或设置印象套接字的选项
	getsockopt(),setsockopt()
	fcntl():可以把套接字设置为非阻塞式I/O型，信号驱动性I/O型，以及设置套接字属主的POSIX的方法。
	ioctl()

 1.getsockopt()，setsockopt()函数
	#include <sys/socket.h>
	int getsockopt(int sockfd, int level, int optname, void* optval, socklen_t *optlen);
	int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen);

	optval是指向某个变量的指针，setsockopt从optval中取得选项待设置的新值,getsockopt把已获取的选项当前值存放在optval中。optva大小由optlen指定。

	套接字选项粗分为两大基本类型：
		1，启用或禁止某个特性的二元选项（称为标志选项）。
		2，取得并返回我们可以设置或检查的特定值的选项。
	当给这些标志选项调用getsockopt函数时，*optval是一个整数。*optval中返回的值为0表示相应的选项被禁止。不为0表示相应项被启动。
	setsockopt()函数需要一个不为0的optval值来启动选项，一个为0的*optval来禁止选项。

 2.套接字状态
	1,SO_BROADCAST:  开启或关闭套接字的广播消息功能。只有数据报套接字支持广播，必须还是在支持广播消息的网络上。
	2,SO_DEBUG:      只有TCP支持，TCP套接字开启本项时，额内核将为TCP在该套接字发送和接受的所有分组保留详细跟踪信息。保存在内核的某个环形缓冲区呢，可以使用trpt程序查看。
	3,SO_DONTROUTE:  本选项规定外出分组将绕过底层协议的正常路由机制。路由守护进程经常使用本选项来绕过路由表，以强制将风组从特定接口送出。
	4,SO_ERROR:      当套接字上发生错误，内核中的协议模块将该套接字的名为so_error的变量设为标准的unix_exxx值中的一个。称它为套接字的待处理错误。
	5,SO_KEEPALIVE:  给TCP套接字设置保持存活选项后，如果2小时内在该套接字的任何一个方向上都没有数据交换，TCP就自动给对端发送一个保持存活探测分节，这是一个对端必须相应的TCP分节。
	  会出现3种情况:
		1，对端回复ACK响应。应用进程得不到通知，在下一个风平浪静的2小时后发送另一个探测分节。
		2，对端回复RST相应。它告知本端TCP：对端已崩溃且已重新启动。该套接字的待处理错误被设置成ECONNRESET，套接字本身则被关闭。
		3，对端对保持存活测试分节没有任何反映，TCP将会另外发送8个探测分节，两两相隔75秒，试图得到一个相应。
	6,SO_LINGER:     本选项指定close()函数对面向连接的协议如何操作。默认close()立即返回，但如果右数据残留在套接字发送缓冲区中，系统将试着把这些数据发送给对端。
		struct linger {
			int l_onoff;
			int l_linger;
		}
		对setsockopt的调用将根据启动两个成员的值形成三种情形：
		1，如果l_onoff为0，那么关闭本选项，l_linger的值被忽略。这是默认设置，close()就会马上返回。
		2，如果l_onoff为非0，l_linger为0，那么当close某个链接是TCP将中断该链接。也就是说TCP将丢弃保留在套接字发送缓冲内的任何数据，并发送一个RST给对端。而没有通常的四分组链接终止序列。
		3，如果l_onoff为非0值，且l_linger为非0值，那么当套接字关闭时，内核将拖延一段时间。这就是说如果套接字发送缓冲区内仍有数据，那么进程就会进入睡眠，直到发送端的所有数据发送完且被对方确认。

	7,SO_OOBINLINE:在本选项打开时，带外数据将被留在正常输入阵列(在线存留)；
	8,SO_RCVBUF和SO_SNDBUF：每个套接字都有一个发送缓冲区和接受缓冲区。接受缓冲区是保存接受到的数据，直到应用进程来读取。套接字接受缓冲区中可用空间的大小限定了TCP通知对端的窗口大小。
							TCP套接字接受缓冲区不可能溢出，因为不允许对端发送超过本端所通告窗口大小的数据，如果对端无视窗口大小，发送大于窗口的数据，本端TCP将丢弃他们。
							当设置TCP套接字缓冲区大小时，函数调用的顺序很重要。因为TCP的窗口规模选项是在创建链接时用SYN分节与对端互换得到的。所以设置应在connect()和listen()之前设置。
	9,SO_RCVLOWAT和SO_SNDLOWAT:每个套接字还有一个接受低水位标记和一个发送低水位标记。他们由select函数使用。理解为超过这个低水位数据量，select就认定套接字可读，TCP，UDP，SCTP默认为1.
	10,SO_RCVTIMEO和SO_SNDTIMEO:这两选项允许我们给套接字的接受和发送设置一个超时值。也可以通过0s.0us来禁止超时。默认两个超时都是被禁止的。
	11,SO_REUSEADDR和SO_REUSEPORT:
	   SO_REUSEADDR套接字选项有四个不同的作用：
		 1，允许启动一个监听服务器并绑定其众所周知的端口，即使以前建立的将该端口用作他们本地端口的链接依然存在。
			说明：启动监听服务器，链接到达，派生子进程处理客户，监听服务器终止，但子进程继续为现有链接上的客户服务，重启监听服务器。
				当重启监听服务时，socket,bind,listen调用时，它试图绑定一个现有的链接上的端口，bind会失败。但如果在socket()和bind()之间设置SO_REUSEADDR套接字选项，那么bind会成功。
				所有TCP服务器都应该指定本套接字选项，以允许服务器在这重情况下被重启。
		 2，允许在同一端口启动同一服务器的多个实例，只要每个实例绑定一个不同的本地ip地址即可。需要使用IP别名技术。在bind前设置该选项。
			不能启动绑定相同IP地址和相同端口号的多个服务器：这是完全重复的绑定。
			虽然用了别名技术，但是有得系统不允许在绑定了通配地址的端口在绑定其它服务器，必须最后启动绑定通配地址端口的额服务才可以。
		 3，允许单个进程绑定同一端口到多个套接字上，只要每次绑定指定不同的IP地址即可。
		 4，允许完全重复绑定，当一个IP地址和端口已经绑定到某个套接字上是，如果传输协议支持，同样的IP地址和端口允许绑定到另一个套接字上，一般来说这个特性仅支持UDP套接字。
	   SO_REUSEPORT套接字选项有两个作用：
		 1，允许完全绑定，但需要在想要绑定在这个ip和端口上的所有套接字都设置本选项才行。
		 2，如果被绑定的IP地址是个多播地址，那么SO_REUSEADDR和SO_REUSEPORT等效。

 3,TCP套接字选项
	level: IPPROTO_TCP
	1,TCP_MAXSEG套接字选项
		本选项允许我们获取或设置TCP链接的最大分节大小(MSS),返回值是我们的TCP可以发送给对端的最大数据量，它通常是SYN分节通知的MSS，除非TCP选择使用比对端通知的MSS小些的值。
		如果该返回值是在链接建立之前（得到对端SYN之前）获得，那返回值是未从对端收到MSS选项的情况下所用的默认值。

	2,TCP_NODELAY套接字选项
		本功能开启或关闭TCP的Nagle算法，默认该算法是开启的。
		Nagle算法：用于处理小报文段(微小分组)的发送问题，核心思想是允许网络中最多只有一个小分组被发送，而待发的其它小分组会被从新分组成一个“较大的”小分组，等收到上一个小分组的应答在发送。
		而关闭该算法，TCP会不等待上一个分节的应答，直接发送下一个小分组。

 4,STCP套接字选项
	level: IPPROTO_SCTP
	略

 5,fcntl函数
	fcntl函数可执行各种描述符控制操作。
	阻塞：比如read，读文件描述副，描述符内没有可读数据就等，等到数据之后read就返回。就说描述符是阻塞的。
	非阻塞：读文件描述符，发现没有可读数据就立马返回，这样的文件描述符是非阻塞的。一般都会循环对描述符进行read。
	汇总由fcntl,ioctl,路由套接字执行的不同操作：
	------------------------------------------------------------------------------------------------------------
	操作                             | fcntl              | ioctl
	------------------------------------------------------------------------------------------------------------
	设置套接字为非阻塞式I/O型        |F_SETFL,O_NONBLOCK  | FIONBIO
	设置套接字为信号驱动式I/O型      |F_SETFL,O_ASYNC     | FIOASYNC
	设置套接字属主                   |F_SETOWN            | SIOCSPGRP,FIOSETOWN
	获取套接字属主                   |F_GETOWN            | SIOCSPGRP,FIOSETOWN
	获取套接字接受缓冲区中的字节数   |                    | FIONREAD
	测试套接字是否处于外带标志       |                    | SIOCATMARK
	获取接口列表                     |                    | SIOGIFCONF
	接口操作                         |                    | SIOC{GS}IFxxx
	ARP高速缓存操作                  |                    | SIOCxARP
	路由表操作                       |                    | SIOCxxxRT
	------------------------------------------------------------------------------------------------------------
	
	#include <fcntl.h>
	int fcntl(int fd, int cmd, ...);

	fcntl开启非阻塞式IO的典型代码“
	int flags;
	if((flags=fcntl(fd, F_GETFL, 0) < 0){
		return ; // err
	}
	flags |= O_NONBLOCK;
	if(fcntl(fd, F_SETFL, flags)
		return ; /err
	这样先获得描述符的现有标志，在把非阻塞的标志加进去，在把新标志设置给描述符。保证在原有的描述符特性上只添加非阻塞的性质，而不会删掉之前的特性。


第八章 UDP套接字编程
	UDP是无链接不可靠的数据报协议，非常不同于TCP提供的面向链接的可靠字节流。
	这里的可靠是因为TCP已经发送过数据SYN确定对端主机的对应端口已经绑定了监听程序，且对端也回馈了本端，两端都知道对方活着，且对方的地址也都晓得。
	不可靠是因为UDP只知道对方地址和端口，并不知道该地址和端口是否绑定了程序，在这种情况下发送数据，因为对端是否正确，在这种情况下发送数据是不可靠的。

	#include <sys/socket.h>
	ssize_t recvfrom(int sockfd, void* buff, size_t nbytes, int flags, struct sockaddr* from, socklen_t *addrlen);
	ssize_t sendto(int sockfd, const void* buff, size_t nbytes, int flags, const struct sockaddr *to, socklen_t *addrlen);

	作为服务端需要bind()端口：
	bind(sockfd, (struct sockaddr*)(&servaddr), sizeof(servaddr));
	然后阻塞，等待接受数据，阻塞在recvfrom函数:
	recvfrom(sockfd, mesg, 4096, 0, pcliaddr, &len);
	当有udp数据报接收到后，mesg保存数据，pcliaddr保存客户端协议地址。
	然后掉sendto把mesg在发送给客户端：
	sendto(sockfd, mesg, n, 0, pcliaddr, len);

	客户端没有bind()端口，也没有connect(),tcp客户端在connect()时内核为客户端分配临时端口，而UDP则在没有bind()时，第一次sendto时给UDP客户端分配一个临时端口。

 数据报的丢失
	以回显程序为例：
	客户端发送一个数据给服务器，服务器接受到数据后在发给客户端，客户端把数据在显示出来。
	所以客户端先sendto在recvfrom。
	如果在这个发送过程中，sendto的数据丟了，客户端没有收到任何数据所以也不会返回任何东西，客户端就一直阻塞在recvfrom内。
	为了防止这种永久阻塞的一般方法是给客户的recvfrom调用一个设置超时。但仅仅给recvfrom设置超时并不是完美的办法。
	比如，超时返回我们就不知到数据是没到达服务器，还是服务器的应答没到客户端。
	
 验证接受到的响应
	以上的情况，可以在客户端recvfrom时接受服务器端的协议地址，在和之前sendto时的服务器协议地址对比下是否是相同地址，如果相同就是服务器的应答。
	这样依然有弊端：服务器有两个ip,而套接字bind()的ip是通配地址，客户发送通过ip1，服务器反馈通过ip2，贼客户端那边依然判断为服务器没有应答。

	
 服务器未运行
	这种情况也就是说，UDP客户端在一个不会接受消息的地址发送消息。那么当客户端sendto之后，就会永远阻塞在recvfrom上，然而sendto发送出去信息失败是有消息返回的。而sendto却是成功返回的，因为sendto成功仅代表在接口输出队列中具有存放所形成IP数据报的空间。而返回的错误是在内核的协议里，这样没法将错误发送给应用进程。这样的错误叫异步错误。
	对于UDP的异步错误的一个规则是：对于一个UDP套接字，由它引发的异步错误并不返回给它，出发它已经链接。对，UDP是可以链接的，用connect.

 UDP的connect()
	除非套接字已经链接，否则异步错误不会返回给UDP套接字的。所以UDP也需要connect()，但和TCP的大不一样。
	UDP的connect没有三次握手，内核只是检查是否存在立即可知的错误，记录对方IP和端口号，然后立即返回到调用进程。
	区分一下已链接UDP和默认未链接的UDP套接字:
		1.不能在给输出操作指定目的地IP和端口号。所以不能哟内sendto指定协议地址，所以改用write，send，写到已练级的UDP套接字上的任何内容会被自动发送到由connect指定的协议地址
		2.不能在使用recvfrom以获取数据报的发送者，改用read，recv，recvmsg。在一个已经链接的套接字上，客户端向这个套接字发送的数据报到达的地址是先前connect时指定的协议地址，返回到这个套接字上的数据报也只能是connect时指定的地址发回来的数据报。理解：在connect时，对客户端来说，使用这个套接字发送的数据报已经确定过服务器的地址，从这个套接字接受到的数据报也只可能是connect时指定的那个服务器的地址。这样限制了一个UDP套接字能且仅能与一个对端交换数据报。
		3.已链接的UDP套接字引发的异步错误会返回给他们所在的进程，而未链接的UDP套接字不接受任何异步错误。

 UDP多次调用connect
	1,指定新的ip和端口
	2,断开套接字： 再次调用connect时把套接字地址结构的地址族成员设置为AF_UNSPEC，这样会返回一个EAFNOSUPPORT错误。

 UDP缺乏流量控制
	循环发送2000个UDP到服务端，服务端看处理境况来处理客户端的数据报。如果处理的慢，而客户端发送的快，那就会发生丢包现象。
	所以说UDP缺乏流量控制，且不可靠

 UDP套接字接受缓冲区
	UDP默认接受缓冲区大小为42080byte，可以使用setsockopt(SO_RECVBUF)来修改。
	setsockopt(sockfd, mesg, MAXLINE, 0, pcliaddr, &len);

 使用select函数的TCP和UDP会设服务器程序
	从这里的代码来看：TCP，UDP绑定在了相同的IP和端口上了。
	select只添加了listenfd和udpservfd, TCP有链接子进程处理。UDP有数据报使用recvfrom读取。

第九章 基于SCTP套接字编程
 1,接口模型
	SCTP套接字分为1v1和1vN套接字。
























































