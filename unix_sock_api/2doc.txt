第二章 : 传输层：TCP，UDP，SCTP
	2.3 用户数据报协议(UDP):
		一个简单的传输层协议。应用程序往一个UDP套接字写入一个消息，该消息随后被封装到一个UDP数据报，该UDP数据报进而有封装到一个IP数据报，然后发送到目的地。
		UDP不保证UDP数据报会到达其最终目的地，不保证各个数据报的先后顺序跨网络之后保持不变，不保证每个数据报只到达一次。
		UDP传输是缺乏可靠性：1，数据报到达目的地，但校验和检测发现有错误。
							 2，数据报在网络传输中被丢弃，它就无法被投递给UDP套接字，也不会被源端自动重传。
							 3，想要确保一个数据报到达其目的地，可以用程序添加一堆特性，来自对端的确认，本端的超时和重传等。
		可以所UDP提供无连接的服务，因为UDP客户与服务器之间不存在任何长期的联系。
			对于客户UDP套接字，只需要知道目的地地址，不许要知道对端的状态。
			对于服务UDP套接字，只需要接受UDP套接字即可，可以使用一个UDP套接字接受多个客户的UDP数据报。

	2.4 传输控制协议(TCP)：
		TCP提供客户和服务器之间的连接，TCP客户先与某个给定的服务器建立一个连接，在跨该连接与那个服务器交换数据，然后终止这个链接。
			注意：TCP也不能保证数据一定会被对端接受，因为这是不可能办到的，TCP也不能被描述为100%可靠的，它提供可靠的递送或故障的可靠通知。
		RTT(round-trip time):动态估算客户与服务器之间往返时间，该算法便于TCP知道等待一个确认的大概时间。
		TCP通过给其中每个字节关联一个序列号对所发送的数据进行排序。
			比如发送2048字节数据，被分成2个分节，第一个分节发送1~1024字节，第二个分节发送1025~2048字节。如果两个分节最后到达目的地的顺序颠倒，则TCP会根据序号重新排序，在传递给接受的应用程序。如果数据重复，TCP		   可以根据序列号判断数据重复，从而丢弃重复的数据。
		TCP提供流量控制(flow control)：TCP总告知对端在任何时候它一次能够从对端接受到多少字节的数据。这称为通告窗口。该窗口指出接受缓冲区中当前可用的空间量，从而确保发送端发送的数据不会结合搜缓冲区溢出。
		TCP链接是双工的(full-duplex)。这意味着在一个给定的链接上应用可以在任何时刻在进出两个方向上即发送又接收数据。因此TCP必须为每个数据流方向跟踪诸如序列号和窗口大小等状态信息。

	2.5 流控制传输协议(SCTP)

	2.6 TCP连接的建立和终止
		2.6.1 链接建立：三次握手
			1.服务器必须准备好接受外来的链接，通常调用socket,bind,listen来完成，称为被动打开。
			2.客户端通过调用connect发起主动打开，这导致客户端TCP发送一个SYN分节，它告诉服务器，客户端将在链接中发送的数据的初始序号。  SYN i                                 1次握手
			  通常SYN分节不携带数据，其所在的IP数据报值包含一个IP首部，一个TCP首部及可能的TCP选项。                                    SYN j   ACK i+1                       2次
			3.服务器必须确认(ACK)客户端的SYN，即返回给客户端的分节要带有ACK的信息，服务器还需要在回复给客户端的分节中包含SYN。                 ACK j+1                       3次
			4.客户端必须确认服务器的SYN，即返回给服务器一个ACK。
		2.6.2 TCP选项
			1.MSS选项：最大分节大小，发送SYN的TCP一段使用本选项通告对端它的最大分节大小，在本链接的每个TCP分节中愿意接受的最大数据量。
			2.窗口规模选项
			3.时间戳选项
		2.6.3 TCP连接终止：四次挥手
			1.某个应用程序首先调用close，我们称该端执行主动关闭，该端TCP会发送FIN分节给对端；                                                         FIN m                  1次
			2.接受到FIN的对端指向那个被动关闭，这个FIN由TCP确认，FIN的接收作为一个文件结束符传递给接受端的因公进程，TCP会发送一个ACK主动关闭的一方。  ACK m+1                2次
			3.过一段时间后，接受到这个文件描述符的应用将调用close关闭套接字，导致TCP也发送一个FIN。													  FIN n                  3次
			4.接受这个最终FIN的原发送端TCP确认这个FIN。																								  ACK n+1                4次
			在步骤2和步骤3中间，从执行被动关闭的一段到执行主动关闭一段流动数据是可能的，这叫做半关闭。

		2.6.4 TCP状态转换图
			建立连接三次握手：          客户端：                                                服务端：
                               --> SYN_SEND.[connect()]   ->          SYN seq=x         ->      LISTEN.[listen()]    --|
                                |-    ESTABLISHED         <-     SYN seq=y, ACK=x+1     <-      SYN_RCVD             <-|
                                |->   ESTABLISHED         ->         ACK = y + 1        ->      ESTABLISHED
            数据传输：         --> ESTABLISHED.[write()]  ->       seq=x+1,ACK=y+1      ->      ESTABLISHED.[read()] --|
                                   ESTABLISHED            <-         ACK x+2            <-      ESTABLISHED          <-|
            断链接四次挥手：  --> FIN_WAIT_1.[close()]    ->      FIN seq=x+2 ACK=Y+1   ->      CLOSE_WAIT           --|
                接收到ack后变  |- FIN_WAIT_2              <=         ACK x+3            <=      CLOSE_WAIT           ==| 单独发送ACK后，等服务端可以close时，转变状态，到LAST_ACK
                成TIME_WAIT    |- TIME_WAIT               <=         FIN seq = y + 1    <=      LAST_ACK.[close()]   ==| 调用close发送给客户端FIN，此时客户端肯定是TIME_WAIT



			1, CLOSE: 起始点，在超时或者链接关闭时候进入此状态，这并不是一个真正的状态，是个假象的起点或终点。
			2, LISTEN: 服务器等待连接的状态。服务器巾帼socket,bind,listen函数之后，进入LISTEN，开始监听客户端发过来的链接请求。
			3, SYN_SENT: 第一次握手发生阶段，客户端发起连接。客户端调用connect（），发送SYNC给服务端，然后客户端进入SYN_SENT状态，等待服务器返回确认(ACK),如果服务端不能连接，直接进入CLOSE状态。
			4, SYN_RCVD: 第二次握手发生极端，这里是服务器接收了客户端的SYN，此时服务器由LISTEN进入SYN_RCVD状态，同时服务器回复一个ACK，然后发送一个SYN，即SYN+ACK给客户端。
			             还有一种情况，当客户端在发送SYN的同时也收到服务端的SYN请求，即两个同时发起链接请求，那么客户端就会从SYN_SENT转换到SYN_RCVD状态。
			5, ESTABLISHED: 第三次握手发生阶段，客户端接收到服务端的ACK包(SYN+ACK)之后，也会发送一个ACK确认包，客户端进入ESTABLISHED，表明客户端已经准备好了。
                            但TCP需要两端都准备好了才可以传输数据，服务端收到客户端的ACK确认之后，服务端进入ESTABLISHED状态，所以两端都进入准备好的状态。
							ESTABLISHED是一个数据传送状态。



























































